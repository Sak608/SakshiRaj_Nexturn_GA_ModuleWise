1. Find High-Spending Users
Identify users who have spent more than $500 across all their orders.

db.users.aggregate([
  {
    $lookup: {
      from: "orders",
      localField: "userId",
      foreignField: "userId",
      as: "userOrders"
    }
  },
  {
    $addFields: {
      totalSpent: {
        $sum: "$userOrders.totalAmount"
      }
    }
  },
  {
    $match: {
      totalSpent: { $gt: 500 }
    }
  },
  {
    $project: {
      _id: 0,
      userId: 1,
      name: 1,
      totalSpent: 1
    }
  }
]);

------------------------------------------------------------------------------------

2. List Popular Products by Average Rating
Retrieve products with an average rating of 4 or more.

db.products.aggregate([
  {
    $unwind: "$ratings"
  },
  {
    $group: {
      _id: "$productId",
      productName: { $first: "$name" },
      avgRating: { $avg: "$ratings.rating" }
    }
  },
  {
    $match: {
      avgRating: { $gte: 4 }
    }
  },
  {
    $project: {
      _id: 0,
      productId: "$_id",
      productName: 1,
      avgRating: 1
    }
  }
]);

--------------------------------------------------------------------------------

3. Search for Orders in a Specific Time Range
Find all orders between "2024-12-01" and "2024-12-31" and include the user's name.

db.orders.aggregate([
  {
    $match: {
      orderDate: {
        $gte: ISODate("2024-12-01T00:00:00Z"),
        $lte: ISODate("2024-12-31T23:59:59Z")
      }
    }
  },
  {
    $lookup: {
      from: "users",
      localField: "userId",
      foreignField: "userId",
      as: "userDetails"
    }
  },
  {
    $unwind: "$userDetails"
  },
  {
    $project: {
      _id: 0,
      orderId: 1,
      orderDate: 1,
      totalAmount: 1,
      status: 1,
      userName: "$userDetails.name"
    }
  }
]);

-------------------------------------------------------------------

4. Update Stock After Order Completion
Adjust the stock of products based on the items in the order.

const order = db.orders.findOne({ orderId: "ORD001" });
if (order) {
  order.items.forEach(item => {
    db.products.updateOne(
      { productId: item.productId },
      { $inc: { stock: -item.quantity } }
    );
  });
}

------------------------------------------------------------------------------

5. Find Nearest Warehouse
Locate the closest warehouse within a 50-kilometer radius that stocks "P001".

db.warehouses.aggregate([
  {
    $geoNear: {
      near: { type: "Point", coordinates: [-74.006, 40.7128] },
      distanceField: "distance",
      maxDistance: 50000, // 50 km in meters
      query: { products: "P001" },
      spherical: true
    }
  },
  {
    $sort: { distance: 1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      _id: 0,
      warehouseId: 1,
      distance: 1,
      location: 1,
      products: 1
    }
  }
]);

-----------------------------------------------------------------

